<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Let's Talk about CSS</title>
	<meta name="description" content="Let's Talk about CSS">
	<meta name="author" content="王喆">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
	<link rel="stylesheet" href="css/reveal.css">
	<link rel="stylesheet" href="css/theme/default.css" id="theme">
	<link rel="stylesheet" href="lib/css/zenburn.css">
	<link rel="stylesheet" href="css/demo.css">
	<!-- If the query includes 'print-pdf', use the PDF print sheet -->
	<script>
			document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );</script>
	<!--[if lt IE 9]>
	<script src="lib/js/html5shiv.js"></script>
	<![endif]-->
</head>
<body>
	<div class="reveal">
		<!-- Any section element inside of this container is displayed as a slide -->
		<div class="slides">
			<section>
				<h1>Let's Talk about CSS</h1>
				<h3>by 王叨叨</h3>
			</section>
			<section>
				<h2>CSS语法</h2>
				<ul>
					<li>
						<dl>
							<dt class="fragment">基础语法</dt>
							<dd class="fragment">
								每条声明由一个属性和一个值组成。属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。
							</dd>
							<dd style="text-align:center" class="fragment">
								<img src="pic/ct_css_selector.gif" alt="" />
							</dd>
						</dl>
					</li>
					<li>
						<dl>
							<dt class="fragment">高级语法</dt>
							<dd class="fragment">选择器的分组</dd>
							<dd class="fragment">
								<pre><code contenteditable>h1,h2,h3,h4,h5,h6 {color: green;}</code></pre>
							</dd>
							<dd class="fragment">选择器的继承</dd>
							<dd class="fragment">
								<pre><code contenteditable>body {font-family: "Microsoft YaHei", sans-serif;}</code></pre>
							</dd>
						</dl>
					</li>
				</ul>
			</section>
			<section>
				<section>
					<h2>CSS 选择器</h2>
					<ul>
						<li>派生选择器</li>
						<li>id选择器</li>
						<li>类选择器</li>
						<li>属性选择器</li>
						<li>后代选择器</li>
						<li>子元素选择器（IE6忽略）</li>
						<li>相邻兄弟选择器（IE6忽略）</li>
						<li>伪类（IE6只对链接支持hover）</li>
						<li>伪元素</li>
					</ul>
				</section>
				<section>
					<h2>派生选择器</h2>
					<p>
						派生选择器允许你根据文档的上下文关系来确定某个标签的样式。通过合理地使用派生选择器，我们可以使 HTML 代码变得更加整洁。
					</p>
					<pre class="fragment"><code contenteditable>h2 , li strong {
    font-style: italic;
    font-weight: normal;
  }</code></pre>
					<p class="fragment">上面的代码，是让h2标签里面的文字和列表中的strong标签变成斜体字，然后定义字体粗细为普通。</p>
				</section>
				<section>
					<h2>ID（类）选择器</h2>
					<p>
						ID 选择器类似于类选择器，但是ID 选择器的权重比类选择器权重高！有一点需要注意的是，ID选择器和类选择器是区分大小写的！
					</p>
				</section>
				<section>
					<h2>属性选择器</h2>
					<p>
						如果希望选择有某个属性的元素，而不论属性值是什么，可以使用简单属性选择器。为了将同时有 href 和 title 属性的 HTML 超链接的文本设置为红色，可以这样写：
					</p>
					<pre><code contenteditable>a[href][title] {color:red;}</code></pre>
				</section>
				<section>
					<h2>子串匹配属性选择器</h2>
					<table>
						<tbody>
							<tr>
								<th>类型</th>
								<th>描述</th>
							</tr>

							<tr>
								<td>[abc^="def"]</td>
								<td>选择 abc 属性值以 "def" 开头的所有元素</td>
							</tr>

							<tr>
								<td>[abc$="def"]</td>
								<td>选择 abc 属性值以 "def" 结尾的所有元素</td>
							</tr>

							<tr>
								<td>[abc*="def"]</td>
								<td>选择 abc 属性值中包含子串 "def" 的所有元素</td>
							</tr>
						</tbody>
					</table>
				</section>
				<section>
					<h2>试一试</h2>
					<iframe src="http://www.w3school.com.cn/tiy/t.asp?f=csse_selector_attribute_substring_matching" width="960" height="600" style="margin:0;overflow:hidden;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>
				</section>
				<section>
					<h2>后代选择器（包含选择器）</h2>
					<p>
						在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符。每个空格结合符可以解释为“... 在 ... 找到”。注意区分子元素选择器！
					</p>
				</section>
				<section>
					<h2>子元素选择器</h2>
					<p>
						在上面的后代选择器，我故意要留在这里放出代码，是因为这个很容易就搞混了。所谓“后代”从字面意思理解，就是只要是后代，都可以被选择到！例如，我爸的后代，包括我和我儿子，等我儿子有孩子了，还包含我儿子的孩子！但是子元素就不一样了，例如我爸的儿子，那就是我和我的兄弟，和我儿子就没关系了！再拿
						<a href="index01-01.html">代码</a>
						来说事！
					</p>
					<p>
						以上代码，第一行就是定义所有的em标签是蓝色的字，但是第二行只控制子元素，所以“的儿子”就是红色了！但是，如果把样式的顺序改变了，就出现不同的结果了，可以考虑下！（IE6不识别）
					</p>
				</section>
				<section>
					<h2>相邻兄弟选择器</h2>
					<p>可选择紧接在另一元素后的元素，且二者有相同父元素（IE6不识别）！</p>
					<iframe src="http://www.w3school.com.cn/tiy/t.asp?f=csse_selector_adjacent_sibling_2" width="960" height="450" style="margin:0;overflow:hidden;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>
				</section>
				<section>
					<h2>伪类和伪元素</h2>
					<p>这块我会放到Hug CSS 3（拥抱CSS 3）里面来说，CSS 3增加了很多！</p>
				</section>
				<section>
					<h2>CSS优先级算法</h2>
					<p style="text-align:center">
						<img src="pic/css_selector.gif" alt="" />
					</p>
				</section>
				<section>
					<h2>CSS优先级算法</h2>
					<p>
						CSS优先级包含四个级别(行内选择符、ID选择符、类选择符、元素选择符！)不过都没有important厉害，他有一票否决权！
					</p>
					<dl>
						<dt>每种样式都对应有四个值：a&nbsp;-&nbsp;b&nbsp;-&nbsp;c&nbsp;-&nbsp;d</dt>
						<dd>每个行内样式，加1&nbsp;-&nbsp;0&nbsp;-&nbsp;0&nbsp;-&nbsp;0</dd>
						<dd>每个ID样式，加0&nbsp;-&nbsp;1&nbsp;-&nbsp;0&nbsp;-&nbsp;0</dd>
						<dd>每个类样式、属性样式、伪类样式，加0&nbsp;-&nbsp;0&nbsp;-&nbsp;1&nbsp;-&nbsp;0</dd>
						<dd>每个元素样式、伪元素样式，加0&nbsp;-&nbsp;0&nbsp;-&nbsp;0&nbsp;-&nbsp;1</dd>
					</dl>
					<pre class="fragment"><code contenteditable>#logo{color:red;}/*权重为0100*/
.logo{color:yellow;}/*权重为0010*/
a.logo:hover{color:green;}/*权重为0030*/
.logo:before{color: blue;}/*权重为0011*/</code></pre>
				</section>
				<section>
					<h2>现在是提问时间</h2>
					<p style="text-align:center">
						<img src="pic/tiwen.jpg" alt="" />
					</p>
				</section>
			</section>
			<section>
				<section>
					<h2>不得不说的CSS框模型</h2>
					<p>
						CSS 框模型 (Box Model) 规定了元素框处理元素内容（element）、内边距（padding）、边框(border) 和外边距(margin)的方式。
					</p>
					<p style="text-align:center">
						<img src="pic/ct_boxmodel.gif" alt="" />
					</p>
				</section>
				<section>
					<h2>浏览器兼容性</h2>
					<p>
						一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。
					</p>
				</section>
				<section>
					<h2>margin的重叠（塌陷）</h2>
					<p>
						若有两个上下排列的块级元素，分别为第一个块级元素设置 margin-bottom ，第二个块级元素设置 margin-top，则两块元素之间的距离并不是margin-bottom + margin-top的总和，而是两者中的较大者，这个现象称为margin的“塌陷”现象，意思是说较小的margin塌陷到了较大的margin中，因此在实际操作中，当修改某些margin值后，页面效果而无变化的情况时，不要被表象所迷惑。
					</p>
					<p style="text-align:center">
						<img src="pic/ct_css_margin_collapsing_example_1.gif" alt="" />
					</p>
				</section>
				<section>
					<h2>其他知识</h2>
					<p>块级元素：顾名思义，是一块一块的。特点：总是在新行上开始；高度，行高以及外边距和内边距都可控制；宽度缺省是它的容器的100%，除非设定一个宽度；它可以容纳内联元素和其他块元素；</p>
					<p>内联元素：也有称为行内元素，行内元素不可以设置宽（width）和高（height），但可以与其他行内元素位于同一行，内联元素内一般不可以包含块级元素。内联元素的高度一般由元素内部的字体大小决定，宽度由内容的长度控制。内联元素不能设置外边据，但是可以设置内边距。</p>
				</section>
				<section>
					<h2>现在是提问时间</h2>
					<p style="text-align:center">
						<img src="pic/tiwen.jpg" alt="" />
					</p>
				</section>
			</section>
			<section>
				<section>
					<h2>定位</h2>
					<p>CSS 有三种基本的定位机制：定位、浮动（比较深奥）和普通流。</p>
					<p>下面介绍下position（定位）属性值的含义：</p>
				</section>
				<section>
					<h2>static</h2>
					<p>
						元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。默认都是以这样的方式！
					</p>
				</section>
				<section>
					<h2>relative（相对定位）</h2>
					<p>元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。</p>
					<p class="demo_relative">
						注意，偏移的位置是以本来应该显示的位置来定位的，例如下面的这个div，浏览器默认的状态下是static，我动态的给它了一个relative，然后就相对于以前的位置top改变了100px！
					</p>
					<div class="demo">position: static;</div>
				</section>
				<section>
					
					<h2>absolute（绝对定位）</h2>
					
					<p class="demo_absolute">
						元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。他的定位是相对于父级的绝对定位，如果父级没有定位，那就按照body（浏览器窗口）来进行定位。
					</p>
					<div class="demo">position: static;</div>
					<p>他不占位置了，我自然就上去了！！！</p>
				</section>
				<section>
					<h2>fixed（固定定位）</h2>
					<p class="demo_fixed">
						从字面理解来看，就是固定到一个位置上不动的，位置是相对于父级来说的！元素框的表现类似于将 position 设置为 absolute，具体来看下
						<a href="index01-02.html">例子</a>
						吧！
					</p>
				</section>
				<section>
					<h2>现在是提问时间</h2>
					<p style="text-align:center">
						<img src="pic/tiwen.jpg" alt="" />
					</p>
				</section>
			</section>
			<section>
				<section>
					<h2>浮动</h2>
					<p>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</p>
					<dl>
						<dt class="fragment">浮动分为4种</dt>
						<dd class="fragment">1.  left（元素向左浮动）</dd>
						<dd class="fragment">2.  right（元素向右浮动）</dd>
						<dd class="fragment">3.  none（默认值。元素不浮动，并会显示在其在文本中出现的位置）</dd>
						<dd class="fragment">4.  inherit（规定应该从父元素继承 float 属性的值，任何的版本的 IE都不支持）</dd>
					</dl>
				</section>
				<section>
					<h2>浮动规则</h2>
					<p>浮动的规则，总结了下，只有这几点，想看英文原版的，<a href="http://www.w3.org/TR/CSS2/visuren.html#floats">移步这里</a>，我简单的翻译了下然后根据自己的理解做出了以下的东西。</p>
				</section>
				<section>
					<p>1 . The left outer edge of a left-floating box may not be to the left of the left edge of its containing block. An analogous rule holds for right-floating elements.</p>
					<p>浮动元素的左边外边距不能超出其包含块的左边的内边距，右边类似。</p>
					<div class="float">
						<div class="float1 fleft">1</div>
					</div>
				</section>
				<section>
					<p>2 . If the current box is left-floating, and there are any left-floating boxes generated by elements earlier in the source document, then for each such earlier box, either the left outer edge of the current box must be to the right of the right outer edge of the earlier box, or its top must be lower than the bottom of the earlier box. Analogous rules hold for right-floating boxes.</p>
					<p>浮动元素不会重叠，后浮动的元素永不会超过先浮动元素。</p>
					<div class="float">
						<div class="float1 fleft">1</div>
						<div>打酱油的文本</div>
						<div class="float2 fleft">2</div>
					</div>
				</section>
				<section>
					<p>3 . The right outer edge of a left-floating box may not be to the right of the left outer edge of any right-floating box that is next to it. Analogous rules hold for right-floating elements.</p>
					<p>左浮动元素的右边外边界不会再其右边右浮动元素的左边外边界的右边，同样，右浮动元素的左边外边界不会出现在其左边浮动元素的右边外边界的左边。这两句是不是有点拗口，说简单点就是，左浮动元素和右浮动元素不会出现水平交叉重叠。如果两个方向浮动的元素总宽超出了包含块，则会让后浮动的元素移动到先浮动元素的下方，然后再浮动。</p>
					<div class="float">
						<div class="float1 fright">1</div>
						<div class="float2 fleft">2</div>
					</div>
				</section>
				<section>
					<p>4 . A floating box's outer top may not be higher than the top of its containing block. When the float occurs between two collapsing margins, the float is positioned as if it had an otherwise empty anonymous block parent taking part in the flow. The position of such a parent is defined by the rules in the section on margin collapsing.</p>
					<p>一个浮动元素的顶端不能比其父元素的内顶端更高。如果一个浮动元素在两个合并外边距之间，放置这个元素时就好像在两个元素之间有一个块级父元素。</p>
					<div class="float">
						<div class="float1">1</div>
						<div class="float2 fleft">2</div>
						<div class="float3">3</div>
					</div>
				</section>
				<section>
					<p>5 . The outer top of a floating box may not be higher than the outer top of any block or floated box generated by an element earlier in the source document.</p>
					<p>浮动元素的顶端不能比先浮动的元素或块元素更高。</p>
					<div class="float">
						<div class="float1">1</div>
						<div class="float2 fleft">2</div>
					</div>
				</section>
				<section>
					<p>6 . The outer top of an element's floating box may not be higher than the top of any line-box containing a box generated by an element earlier in the source document.</p>
					<p>浮动元素顶端不能超越浮动之前包含该元素内容的行的顶端。也就是说，若段落中间有个浮动的图像，浮动后的图像最高只能摆放在图像所在行的行框的顶端。</p>
					<div class="float">
						<p>我是一个打酱油的！我是一个打酱油的!我是一个打酱油的！我是一个打酱油的!我是一个打酱油的！我是一个打酱油的!我是一个打酱油的！我是一个打酱油的!<img class="fleft" src="pic/baozou.jpg" alt="" /></p>
					</div>
				</section>
				<section>
					<p>7 . A left-floating box that has another left-floating box to its left may not have its right outer edge to the right of its containing block's right edge. (Loosely: a left float may not stick out at the right edge, unless it is already as far to the left as possible.) An analogous rule holds for right-floating elements.</p>
					<p>浮动元素顶端不能超越浮动之前包含该元素内容的行的顶端。也就是说，若段落中间有个浮动的图像，浮动后的图像最高只能摆放在图像所在行的行框的顶端。</p>
					<div class="float">
						<p>我是一个打酱油的！我是一个打酱油的!我是一个打酱油的！我是一个打酱油的!我是一个打酱油的！我是一个打酱油的!我是一个打酱油的！我是一个打酱油的!<img class="fleft" src="pic/baozou.jpg" alt="" /></p>
					</div>
				</section>
				<section>
					<p>8 . A floating box must be placed as high as possible.</p>
					<p>浮动元素应该尽可能高地摆放，向左浮动尽可能往左边摆放前提是受前面规则的约束。</p>
					<div class="float">
						<div class="float1 fleft">1</div>
						<p>非浮动元素！非浮动元素！非浮动元素！非浮动元素！非浮动元素！非浮动元素！非浮动元素！非浮动元素！</p>
					</div>
				</section>
				<section>
					<p>9 . A left-floating box must be put as far to the left as possible, a right-floating box as far to the right as possible. A higher position is preferred over one that is further to the left/right.</p>
					<p>浮动元素必须尽可能朝着所浮动的方向向父元素内边距靠近，且位置越高，靠近的程度越大。</p>
					<div class="float">
						<div class="float1 fleft">1</div>
						<div>打酱油的文本</div>
						<div class="float2 fleft">2</div>
						<div>打酱油的文本</div>
						<div class="float3 fleft">3</div>
					</div>
				</section>
				<section>
					<h2>坑爹的9条规则</h2>
					<p>以上就是CSS规范对于浮动行为概括了9个规则。总体看起来很难理解这些规则！说实话，这些规则看起来很蛋疼！</p>
					<img src="pic/kengdie.jpg" alt="" />
				</section>
				<section>
					<h2>精简后的浮动规则</h2>
					<dl>
						<dt>浮动元素的活动区域</dt>
						<dd>仅限于它的父容器元素，不会超出父容器。</dd>
					</dl>
					<dl>
						<dt>浮动元素的位置</dt>
						<dd>水平方向：尽可能居左或居右，如果它前面还有浮动元素，会跟在它后面，如果超出该行就会换行；</dd>
						<dd>垂直方向：尽可能的居顶；</dd>
					</dl>
					<img src="pic/gaoxing.jpg" alt="" />
				</section>
				<section>
					<h2>精简后的浮动规则</h2>
					<dl>
						<dt>关于水平方向的位置</dt>
						<dd>向左浮动的元素不会出现在向右浮动的元素的右侧。</dd>
					</dl>
					<dl>
						<dt>关于垂直方向的位置</dt>
						<dd>浮动元素不会比容器的顶部还高；</dd>
						<dd>浮动元素不会比前一个块级元素或浮动元素更高；</dd>
						<dd>浮动元素不会比前一个行内元素更高；</dd>
					</dl>
				</section>
				<section>
					<h2>清除浮动（clear）</h2>
					<dl>
						<dt class="fragment">清除浮动分为5种</dt>
						<dd class="fragment">1.  left（清除当前元素前面的左浮动）</dd>
						<dd class="fragment">2.  right（清除当前元素前面的右浮动）</dd>
						<dd class="fragment">3.  none（默认值。元素不浮动，并会显示在其在文本中出现的位置）</dd>
						<dd class="fragment">4.  both（清除当前元素前面左右浮动）</dd>
						<dd class="fragment">5.  inherit（规定应该从父元素继承 clear 属性的值，任何的版本的 IE都不支持）</dd>
					</dl>
				</section>
				<section>
					<h2>清除浮动的方法</h2>
					<ul>
						<li>空标签方法，优点：通俗易懂，容易掌握；缺点：增加标签，有违结构与表现的分离；</li>
						<li><pre><code contenteditable>&lt;div style="clear:both"&gt;&lt;/div&gt;</code></pre></li>
						<li>使用 br标签和其自身的 html属性，优缺点同上。</li>
						<li><pre><code contenteditable>&lt;br clear="all" /&gt;</code></pre></li>
						<li>父元素设置 overflow：hidden/auto属性，优点：不存在结构和语义化问题，代码量极少；缺点：hidden时内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素，auto时可能会出现内部滚动条。唯一要注意，IE6下要写zoom：1。</li>
					</ul>
				</section>
				<section>
					<h2>清除浮动的方法</h2>
					<ul>
						<li>父元素设置display:table，优点：结构语义化完全正确，代码量极少；缺点：盒模型属性已经改变，由此造成的一系列问题；</li>
						<li>使用:after 伪元素，优点：结构和语义化完全正确,代码量居中；缺点：复用方式不当会造成代码量增加；</li>
						<li><pre><code contenteditable>.clear:after {
	content: "";
	display: block;
	height: 0;
	clear: both;
}
.clear{
	zoom:1;
}</code></pre></li>
					</ul>
				</section>
				<section>
					<h2>最佳方法？</h2>
					<img src="pic/mimang.jpg" alt="" />
					<p>每个都有优缺点，我们要怎么选择呢？<br />如果刚开始接触CSS，我建议使用第一种方法，因为他比较直白。对于前端开发，我推荐最后一种方法，因为在以后开发和维护比较方便！</p>
				</section>
				<section>
					<h2>现在是提问时间</h2>
					<p style="text-align:center">
						<img src="pic/tiwen.jpg" alt="" />
					</p>
				</section>
			</section>
			<section>
				<h2>一些误区</h2>
				<p>到这里，CSS中经常用到的基本上已经讲解完了！很感谢大家耐心的听我唠叨完，不过我还要在最后说一下常见的一些误区。</p>
				<ul>
					<li>id和class：id是狙击枪可以帮助我们精准地定位要想要加载样式的元素，class是双刃剑信手拈来更加轻盈灵便，合则两利，分则两败。</li>
					<li>并不是所有的内容都需要div做“容器”，标签嵌套一定要能省就省，嵌套多了，性能和维护都很头疼！</li>
				</ul>
			</section>
			<section>
				<h2>参考手册（W3School提供）</h2>
				<iframe src="http://www.w3school.com.cn/css/css_reference.asp" width="960" height="600" style="margin:0;overflow:hidden;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>
			</section>
			<section>
				<h2>生产力工具推荐</h2>
				<ul>
					<li>
						编辑器：
						<a href="http://www.vim.org/">Vim</a>
						/
						<a href="http://www.sublimetext.com">Sublime Text 2</a>
						/
						<a href="http://notepad-plus-plus.org/">Notepad++</a>
					</li>
					<li>
						浏览器调试环境：
						<a href="http://www.google.com/chrome">Chrome</a>
						/
						<a href="http://www.mozilla.org/">Firefox</a>
						+
						<a href="http://getfirebug.com/">Firebug</a>
						/
						<a href="http://netrenderer.com/">IE NetRenderer</a>
						/
						<a href="http://ietester.com/">IETester</a>
					</li>
					<li>
						移动设备调试环境：
						<a href="http://www.mozilla.org/projects/fennec">Mozilla Fennec</a>
						/
						<a href="http://www.opera.com/zh-cn/developer/mobile-emulator">Opera Mobile Emulator</a>
					</li>
					<li>
						标注工具：
						<a href="http://www.getmarkman.com/">Mark Man</a>
					</li>
					<li>
						浏览器免刷新开发环境：
						<a href="http://http://livereload.com/">LiveReLoad</a>
						/
						<a href="http://incident57.com/codekit/">CodeKit</a>
					</li>
					<li>
						页面性能测试：
						<a href="http://gtmetrix.com/">Gtmetrix</a>
					</li>
					<li>
						CSS3工具：
						<a href="http://www.css3maker.com/index.html">CSS3Maker</a>
						/
						<a href="http://www.colorzilla.com/gradient-editor/">Ultimate CSS Gradient Generator</a>
					</li>
					<li>
						配色工具：
						<a href="http://colorschemedesigner.com/">Color Scheme Designer 3</a>
						/
						<a href="http://nipponcolors.com/">NIPPON COLORS</a>
					</li>
					<li>
						在线学习：
						<a href="http://www.w3school.com.cn/">W3School</a>
						/
						<a href="http://www.codecademy.com/zh">Codecademy</a>
					</li>
				</ul>
			</section>
			<section>
				<h1>To Be Continue...</h1>
				<h6>
					<a href="####">Hug CSS 3</a>
				</h6>
			</section>
		</div>
	</div>
	<script src="lib/js/head.min.js"></script>
	<script src="js/reveal.min.js"></script>
	<script src="js/jquery.min.js"></script>
	<script src="js/demo.js"></script>
	<script>
			// Full list of configuration options available here:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
				transition: Reveal.getQueryHash().transition || 'zoom', // default/cube/page/concave/zoom/linear/fade/none

				// Optional libraries used to extend on reveal.js
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
					// { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } }
					// { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
				]
			});

		</script>

</body>
</html>